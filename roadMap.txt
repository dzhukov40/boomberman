---
Ресурсы:

// оф сайт
- игра, которая ляжет в основу [ https://habr.com/post/184666/ ]



---
элементы документа

[?] - информация потенциально для многократного использования
[!] - была ошибка, недочет, нашли решение
[*] - важное контекстное примечание
[#<имяТега>] - так можим выносить различного рода информацию, оставляя ссылку

---
- [boomberman] попробуем замутить бомбермена !! все необходимое должно лежать в одном файле jar !



1) создаем проект
  - создали обычный 'gradle + spring boot' проект
  - важно помнить что 'gradle' имеет кучу плагинов, определяющих как собирать проект
    поэтому у нас стоит плагин -> id 'org.springframework.boot' version '2.0.0.RELEASE'
  - создаем первый контроллер, который убедит нас в том что у нас все запускается
    - EchoController пусть он вернет 'Hello World!' на запрос '/echo'
  - переносим фронт в 'resources/static -> css+img+js'
    - идем на фронт при запущенном приложении, это 'index.html'
    - добавили в проект 'nodeJS' крипт, который запускает сервер для отдачи всей статики
      - запустить сервер [ node debugStaticServer.js ]


2) Делаем общий каркас на фронте нашего приложения
  - на фронте разбиваем код на модули через самовызывающиеся ф-ии
  - правило разбивания
    - один файл это один класс и один модуль
    - имя класса файла и модуля одинаковое
    - модуль при загрузки 'JavaScript' пихает себя в обьект 'window'
    - структура любого модуля

(function () {

    // тут можем определять ф-ии и переменные которые будут закрыты
    // также тут можем подключать другие модули (*) зависимости


    class HttpClient {  // экспортируемый класс
        constructor() {
        }
    }

    window.HttpClient = HttpClient;  // экспортируем класс

})();


3) Делаем все необходимые запросы GET ... POST
  - для работы сервера отладки нало разрешить cros запросы
  - добавим аннотацию в базовый контроллер
  - @CrossOrigin(origins = "http://127.0.0.1:3000")


4) Смотрим внимательно на 'Spring-boot'
  - смотрим лог запуска 'Spring-boot' приложения:
    - [!] сходи посмотри на эти урлики
    - Mapped "{[/actuator/health],methods=[GET] ...
    - Mapped "{[/actuator/info],methods=[GET] ...
    - Mapped "{[/actuator],methods=[GET] ...


5) добавим мапер 'Dozer'
  - url ' http://dozer.sourceforge.net/documentation/gettingstarted.html '
  - добавляем файл 'dozerBeanMapping.xml' описывающий мапинг в 'resources'
  - добавили зависимость в 'build.gradle' строчку 'compile("net.sf.dozer:dozer:${net_sf_dozer_dozer_version}")'


6) добавляем инмемори базу 'h2'
  - добавили в 'resources' папочку 'database'
    - 'shema.sql' создаем таблицы, индексы, вьюхи и так далее
    - 'data.sql' указываем первоначальное запролнение таблиц при запуске приложения
  - добавили зависимость compile("com.h2database:h2:${com_h2database_h2_version}")
  - прописываем настройки 'application.properties'
    -
  - теперь можем при запуске сходить в консоль "http://localhost:8070/h2-console"


7) добавим спринг мониторинг нашего приложения
  - добавим зависимость:
    - compile("org.springframework.boot:spring-boot-starter-actuator:${org_springframework_boot_spring_boot_starter_actuator}")
  - прописываем настройки 'application.properties'
  - теперь мы можем зайти на:
    - ' http://localhost:8090/actuator '
  - (*) много информации для мониторинга + можно создать свой URL и выводить туда статистику
























[?] как запустить собранное приложение
  - запустить сервер из консольки в проектре [ java -jar ./build/libs/boomberman.jar ]
  - топаем на localhost:8070 - порт проставляется в [ applicapion.properties ]
  - пересобираем и запускаем [ gradle clean build && java -jar ./build/libs/boomberman.jar ]

[?] как запустить nodeJS сервер для фронта
  - запустить сервер [ node debugStaticServer.js ]

[?] как создать свой таск в 'gradle'
  - // создали такс, который можем запустить [ gradle hello ]
    task hello {
            println  "hello world!"
            println  helloString  // вытаскиваем строчку из 'gradle.properties'
    }
